//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MyPlayerControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MyPlayerController), typeof(System.Object));
		L.RegFunction("GetCurrentPlayer", GetCurrentPlayer);
		L.RegFunction("AddComponentForPlayer", AddComponentForPlayer);
		L.RegFunction("New", _CreateMyPlayerController);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("playerName", get_playerName, set_playerName);
		L.RegVar("currentPlayer", get_currentPlayer, set_currentPlayer);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMyPlayerController(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				MyPlayerController obj = new MyPlayerController(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MyPlayerController.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MyPlayerController obj = (MyPlayerController)ToLua.CheckObject<MyPlayerController>(L, 1);
			UnityEngine.GameObject o = obj.GetCurrentPlayer();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddComponentForPlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MyPlayerController obj = (MyPlayerController)ToLua.CheckObject<MyPlayerController>(L, 1);
			System.Type arg0 = ToLua.CheckMonoType(L, 2);
			UnityEngine.Component o = obj.AddComponentForPlayer(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyPlayerController obj = (MyPlayerController)o;
			string ret = obj.playerName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playerName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyPlayerController obj = (MyPlayerController)o;
			UnityEngine.GameObject ret = obj.currentPlayer;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentPlayer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyPlayerController obj = (MyPlayerController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.playerName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playerName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyPlayerController obj = (MyPlayerController)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.currentPlayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentPlayer on a nil value");
		}
	}
}

